/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/x8KXAP1zrOj
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
/** Add fonts into your Next.js project:

import { IBM_Plex_Sans } from 'next/font/google'
import { Rubik } from 'next/font/google'

ibm_plex_sans({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.donate = void 0;
var react_1 = require("react");
var button_1 = require("@/components/ui/button");
var label_1 = require("@/components/ui/label");
var checkbox_1 = require("@/components/ui/checkbox");
var slider_1 = require("@/components/ui/slider");
var card_1 = require("@/components/ui/card");
function donate() {
    var _a = react_1.useState({
        cause: [],
        location: [],
        minImpact: 0,
        maxDonation: Infinity
    }), filters = _a[0], setFilters = _a[1];
    var charities = react_1.useMemo(function () {
        return [
            {
                id: 1,
                name: "Charity for Clean Water",
                cause: ["Water", "Health"],
                location: ["Africa", "Asia"],
                impact: 4.8,
                donationAmount: 50
            },
            {
                id: 2,
                name: "Meals for the Hungry",
                cause: ["Food", "Poverty"],
                location: ["North America", "South America"],
                impact: 4.6,
                donationAmount: 35
            },
            {
                id: 3,
                name: "Reforestation Initiative",
                cause: ["Environment", "Climate"],
                location: ["Global"],
                impact: 4.9,
                donationAmount: 75
            },
            {
                id: 4,
                name: "Disaster Relief Fund",
                cause: ["Disaster", "Emergency"],
                location: ["Global"],
                impact: 4.7,
                donationAmount: 60
            },
            {
                id: 5,
                name: "Education for All",
                cause: ["Education", "Youth"],
                location: ["Africa", "Asia"],
                impact: 4.8,
                donationAmount: 45
            },
        ].filter(function (charity) {
            var cause = filters.cause, location = filters.location, minImpact = filters.minImpact, maxDonation = filters.maxDonation;
            return ((cause.length === 0 || charity.cause.some(function (c) { return cause.includes(c); })) &&
                (location.length === 0 || charity.location.some(function (l) { return location.includes(l); })) &&
                charity.impact >= minImpact &&
                charity.donationAmount <= maxDonation);
        });
    }, [filters]);
    var handleFilterChange = function (type, value) {
        setFilters(function (prevFilters) {
            var _a;
            return (__assign(__assign({}, prevFilters), (_a = {}, _a[type] = prevFilters[type].includes(value)
                ? prevFilters[type].filter(function (item) { return item !== value; })
                : __spreadArrays(prevFilters[type], [value]), _a)));
        });
    };
    var handleImpactChange = function (value) {
        setFilters(function (prevFilters) { return (__assign(__assign({}, prevFilters), { minImpact: value })); });
    };
    var handleDonationChange = function (value) {
        setFilters(function (prevFilters) { return (__assign(__assign({}, prevFilters), { maxDonation: value })); });
    };
    var sortedCharities = react_1.useMemo(function () {
        return __spreadArrays(charities).sort(function (a, b) { return b.impact - a.impact; });
    }, [charities]);
    return (React.createElement("div", { className: "bg-background text-foreground" },
        React.createElement("header", { className: "bg-primary text-primary-foreground py-4 px-6" },
            React.createElement("div", { className: "flex items-center justify-between" },
                React.createElement("h1", { className: "text-3xl font-bold" }, "Donate"))),
        React.createElement("main", { className: "container mx-auto py-12 px-4 md:px-6" },
            React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-[1fr_2fr] gap-8" },
                React.createElement("div", { className: "bg-card p-6 rounded-lg shadow-md" },
                    React.createElement("div", { className: "flex items-center justify-between mb-4" },
                        React.createElement("h2", { className: "text-xl font-bold" }, "Filters"),
                        React.createElement(button_1.Button, { variant: "outline", className: "ml-auto shrink-0" }, "Add/Change Preferences")),
                    React.createElement("div", { className: "space-y-4" },
                        React.createElement("div", null,
                            React.createElement("h3", { className: "text-lg font-medium mb-2" }, "Cause"),
                            React.createElement("div", { className: "grid grid-cols-2 gap-2" },
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Water"), onCheckedChange: function () { return handleFilterChange("cause", "Water"); } }),
                                    "Water"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Health"), onCheckedChange: function () { return handleFilterChange("cause", "Health"); } }),
                                    "Health"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Food"), onCheckedChange: function () { return handleFilterChange("cause", "Food"); } }),
                                    "Food"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Poverty"), onCheckedChange: function () { return handleFilterChange("cause", "Poverty"); } }),
                                    "Poverty"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Environment"), onCheckedChange: function () { return handleFilterChange("cause", "Environment"); } }),
                                    "Environment"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Climate"), onCheckedChange: function () { return handleFilterChange("cause", "Climate"); } }),
                                    "Climate"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Disaster"), onCheckedChange: function () { return handleFilterChange("cause", "Disaster"); } }),
                                    "Disaster"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Emergency"), onCheckedChange: function () { return handleFilterChange("cause", "Emergency"); } }),
                                    "Emergency"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Education"), onCheckedChange: function () { return handleFilterChange("cause", "Education"); } }),
                                    "Education"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.cause.includes("Youth"), onCheckedChange: function () { return handleFilterChange("cause", "Youth"); } }),
                                    "Youth"))),
                        React.createElement("div", null,
                            React.createElement("h3", { className: "text-lg font-medium mb-2" }, "Location"),
                            React.createElement("div", { className: "grid grid-cols-2 gap-2" },
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.location.includes("Africa"), onCheckedChange: function () { return handleFilterChange("location", "Africa"); } }),
                                    "Africa"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.location.includes("Asia"), onCheckedChange: function () { return handleFilterChange("location", "Asia"); } }),
                                    "Asia"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.location.includes("North America"), onCheckedChange: function () { return handleFilterChange("location", "North America"); } }),
                                    "North America"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.location.includes("South America"), onCheckedChange: function () { return handleFilterChange("location", "South America"); } }),
                                    "South America"),
                                React.createElement(label_1.Label, { className: "flex items-center gap-2 font-normal" },
                                    React.createElement(checkbox_1.Checkbox, { checked: filters.location.includes("Global"), onCheckedChange: function () { return handleFilterChange("location", "Global"); } }),
                                    "Global"))),
                        React.createElement("div", null,
                            React.createElement("h3", { className: "text-lg font-medium mb-2" }, "Impact"),
                            React.createElement(slider_1.Slider, { value: [filters.minImpact], onValueChange: handleImpactChange, min: 0, max: 5, step: 0.1, className: "w-full" }),
                            React.createElement("div", { className: "flex justify-between text-sm" },
                                React.createElement("span", null, "0"),
                                React.createElement("span", null, "5"))),
                        React.createElement("div", null,
                            React.createElement("h3", { className: "text-lg font-medium mb-2" }, "Donation Amount"),
                            React.createElement(slider_1.Slider, { value: [filters.maxDonation], onValueChange: handleDonationChange, min: 0, max: 100, step: 5, className: "w-full" }),
                            React.createElement("div", { className: "flex justify-between text-sm" },
                                React.createElement("span", null, "$0"),
                                React.createElement("span", null, "$100"))))),
                React.createElement("div", null,
                    React.createElement("h2", { className: "text-xl font-bold mb-4" }, "Recommended Charities"),
                    React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" }, sortedCharities.map(function (charity) { return (React.createElement(card_1.Card, { key: charity.id, className: "bg-card p-6 rounded-lg shadow-md" },
                        React.createElement("h3", { className: "text-lg font-bold mb-2" }, charity.name),
                        React.createElement("div", { className: "flex items-center mb-2" },
                            React.createElement(StarIcon, { className: "w-4 h-4 text-yellow-500 mr-1" }),
                            React.createElement("span", { className: "font-medium" }, charity.impact.toFixed(1))),
                        React.createElement("div", { className: "mb-4" }, charity.cause.map(function (c, i) { return (React.createElement("span", { key: i, className: "inline-block bg-primary/10 text-primary rounded-full px-3 py-1 text-xs mr-2 mb-2" }, c)); })),
                        React.createElement("div", { className: "flex justify-between items-center" },
                            React.createElement("div", { className: "text-muted-foreground" }, charity.location.join(", ")),
                            React.createElement(button_1.Button, { size: "sm", className: "bg-primary text-primary-foreground hover:bg-primary/90" },
                                "Donate $",
                                charity.donationAmount)))); })))),
            React.createElement("section", { className: "mt-12" },
                React.createElement("h2", { className: "text-xl font-bold mb-4" }, "Why Donate?"),
                React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" },
                    React.createElement("div", { className: "bg-card p-6 rounded-lg shadow-md" },
                        React.createElement(GiftIcon, { className: "w-12 h-12 text-primary mb-4" }),
                        React.createElement("h3", { className: "text-lg font-bold mb-2" }, "Maximum Impact"),
                        React.createElement("p", { className: "text-muted-foreground" }, "Our recommendations are carefully curated to ensure your donations have the greatest possible impact.")),
                    React.createElement("div", { className: "bg-card p-6 rounded-lg shadow-md" },
                        React.createElement(BadgeCheckIcon, { className: "w-12 h-12 text-primary mb-4" }),
                        React.createElement("h3", { className: "text-lg font-bold mb-2" }, "Trusted Charities"),
                        React.createElement("p", { className: "text-muted-foreground" }, "We thoroughly vet all the charities we recommend to ensure they are reputable and transparent.")),
                    React.createElement("div", { className: "bg-card p-6 rounded-lg shadow-md" },
                        React.createElement(TestTubeIcon, { className: "w-12 h-12 text-primary mb-4" }),
                        React.createElement("h3", { className: "text-lg font-bold mb-2" }, "Inspiring Testimonials"),
                        React.createElement("p", { className: "text-muted-foreground" }, "Read heartwarming stories from people whose lives have been transformed by the charities we recommend."))))),
        React.createElement("footer", { className: "bg-primary text-primary-foreground py-4 px" })));
}
exports.donate = donate;
function BadgeCheckIcon(props) {
    return (React.createElement("svg", __assign({}, props, { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
        React.createElement("path", { d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" }),
        React.createElement("path", { d: "m9 12 2 2 4-4" })));
}
function GiftIcon(props) {
    return (React.createElement("svg", __assign({}, props, { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
        React.createElement("rect", { x: "3", y: "8", width: "18", height: "4", rx: "1" }),
        React.createElement("path", { d: "M12 8v13" }),
        React.createElement("path", { d: "M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7" }),
        React.createElement("path", { d: "M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5" })));
}
function StarIcon(props) {
    return (React.createElement("svg", __assign({}, props, { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
        React.createElement("polygon", { points: "12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" })));
}
function TestTubeIcon(props) {
    return (React.createElement("svg", __assign({}, props, { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
        React.createElement("path", { d: "M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5h0c-1.4 0-2.5-1.1-2.5-2.5V2" }),
        React.createElement("path", { d: "M8.5 2h7" }),
        React.createElement("path", { d: "M14.5 16h-5" })));
}
